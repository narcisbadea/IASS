using DinkToPdf;
using DinkToPdf.Contracts;
using IASS.BLL.DTOs;
using IASS.BLL.Services.Interfaces;
using IASS.DAL.Repositories.Implementation;
using IASS.DAL.Repositories.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace IASS.BLL.Services.Implementation;

public class PdfExporterService : IPdfExporterService
{
    private readonly IUserService _userService;
    private readonly IAuthService _authService;
    private readonly IUserRepository _userRepository;
    private readonly IAllergyRepository _allergyRepository;
    private readonly IConverter _converter;
    private readonly IXRayService _xrayService;
    private readonly IXRayRepository _xrayRepository;

    public PdfExporterService(IUserService userService, IAuthService authService, IUserRepository userRepository, IAllergyRepository allergyRepository, IXRayService xrayService, IXRayRepository xrayRepository)
    {
        _userService = userService;
        _authService = authService;
        _userRepository = userRepository;
        _allergyRepository = allergyRepository;
        _xrayService = xrayService;
        _xrayRepository = xrayRepository;
    }

    public async Task<ProfileForPdfExporterDto> GetDataForPdf(string userId)
    {
        var user = await _userRepository.GetUserById(userId);
        var allergies = await _allergyRepository.GetAllergyForUser(userId);
        var xrays = await _xrayRepository.GetAllXrayByUserId(userId);
        var UserForPdf = new ProfileForPdfExporterDto
        {
            Xrays = xrays,
            Patient = user,
            Allergies = allergies
        };
        return UserForPdf;
    }

    public async Task<ProfileForXmlDto> GetDataForxml(string userId)
    {
        var user = await _userRepository.GetUserById(userId);
        var allergies = await _allergyRepository.GetAllergyForUser(userId);
        var UserForPdf = new ProfileForXmlDto
        {
            Patient = user,
            Allergies = allergies.ToList()
        };
        return UserForPdf;
    }

    public async Task<byte[]> GeneratePdf(string userId)
    {
        var profile = await GetDataForPdf(userId);
        var document = new HtmlToPdfDocument()
        {
            GlobalSettings = {
                ColorMode = ColorMode.Color,
                Orientation = Orientation.Portrait,
                PaperSize = PaperKind.A4,
            },
            Objects = {
                new ObjectSettings() {
                    PagesCount = true,
                    HtmlContent = $"<html><body><h1>{profile.Patient.FirstName} {profile.Patient.LastName}</h1><p>Age: {profile.Patient.Age}</p><p>Telephone: {profile.Patient.Telephone}</p><p>Address: {profile.Patient.Address}</p><p>CNP: {profile.Patient.CNP}</p></body></html>",
                    WebSettings = { DefaultEncoding = "utf-8" },
                    HeaderSettings = { FontSize = 9, Right = "Page [page] of [toPage]", Line = true },
                    FooterSettings = { FontSize = 9, Right = "Generated by DinkToPdf", Line = true },
                }
            }
        };

        var pdf = _converter.Convert(document);

        return pdf;
    }
}
